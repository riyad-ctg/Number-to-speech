/**
 * The home frame or the main view.
 */
package numbertospeech.view;

import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.net.URISyntaxException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import numbertospeech.service.FileLuncher;
import numbertospeech.service.Manager;

/**
 * riyadnoapara@gmail.com
 * https://github.com/riyad-ctg/Number-to-speech
 * +8801829443600
 * 
 * @author RIYAD
 */
public class JFrameHome extends javax.swing.JFrame {
    
    private FileLuncher fileLuncher;
    private Manager manager;
    private Thread t;
    
    /**
     * 
     * The constructor
     * @param manager
     * @param fileLuncher
     */
    public JFrameHome(Manager manager,FileLuncher fileLuncher) {
        try {
            initComponents();
            
            this.manager = manager;
            this.fileLuncher = fileLuncher;
            
            manager.setOnCenterLocation(this);
            this.setLimitToJTextField(15);
            
            fileLuncher.playSound("/numbertospeech/assets/inputanumber.wav");
        } catch (IOException | URISyntaxException ex) {}
        
    }
    
    /**
     * Setting maximum length that can be typed in the textfield.
     * @param limit The limited digit. Default is 15
     */
    private void setLimitToJTextField(int limit){
        this.jTextFieldNumber.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e){
                if(jTextFieldNumber.getText().length()>=limit) e.consume();
            }
        });
    }
    

    /**
     * This method is called from within the constructor to initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextFieldNumber = new javax.swing.JTextField();
        jButtonTell = new javax.swing.JButton();
        jLabelText = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Traditional Arabic", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 0, 0));
        jLabel1.setText("NUMBER TELLER MACHINE");

        jTextFieldNumber.setFont(new java.awt.Font("Tw Cen MT", 0, 24)); // NOI18N
        jTextFieldNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldNumberActionPerformed(evt);
            }
        });

        jButtonTell.setFont(new java.awt.Font("Traditional Arabic", 0, 18)); // NOI18N
        jButtonTell.setText("TELL");
        jButtonTell.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTellActionPerformed(evt);
            }
        });

        jLabelText.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(128, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 542, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(118, 118, 118))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTextFieldNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 546, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonTell, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(126, 126, 126))))
            .addGroup(layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addComponent(jLabelText, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(69, 69, 69)
                .addComponent(jTextFieldNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonTell, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addComponent(jLabelText, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(71, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonTellActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTellActionPerformed
        numberChecker();
    }//GEN-LAST:event_jButtonTellActionPerformed

    private void jTextFieldNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldNumberActionPerformed
        numberChecker();
    }//GEN-LAST:event_jTextFieldNumberActionPerformed

    /**
     * Validates the number and do other things.
     */
    private void numberChecker(){
        try {
            /****************** DATA VALIDATION STARTS *********************/
            
            String thenumber = jTextFieldNumber.getText().trim();
            int result = manager.stringChecker(thenumber);
            
            if(result == Manager.EMPTY_STRING){
                fileLuncher.stopSound();
                fileLuncher.playSound("/numbertospeech/assets/inputanumber.wav");
                jTextFieldNumber.requestFocus();
                return;
            }
            
            if(result == Manager.FALSE_STRING){
                fileLuncher.stopSound();
                fileLuncher.playSound("/numbertospeech/assets/thisisnot.wav");
                jTextFieldNumber.requestFocus();
                jTextFieldNumber.selectAll();
                return;
            }
            
            /****************** DATA VALIDATION ENDS *********************/
            
            thenumber = manager.formatTheNumber(thenumber); //Formatting deleting front zeroes.
            jTextFieldNumber.setText(thenumber); 
            
            List<String> instructions = manager.instructionsGenerator(thenumber);
               
            numberProcessor(instructions);  //Ok play and show all instrutions.
            
        } catch (IOException | URISyntaxException ex) {
            JOptionPane.showMessageDialog(rootPane, ex);
        }
    }
    
    /**
     * Creates and Recreates thread that is play instructions 
     * in a efficient way.
     * @param instructions A list of instructions. 
     */
    private void numberProcessor(List<String> instructions){
        if(t != null && t.isAlive()){
            t.stop();
        }
        t = new Thread(new Runnable() {
        @Override
            public void run() {
                for(String insruction:instructions){
                    try {
                        singleInstructionPlayer(insruction);
                        jLabelText.setText(insruction);
                        Thread.sleep(fileLuncher.Gotmili*50);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(JFrameHome.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                jLabelText.setText("");
            }
        });
        t.start();
    }
    
    /**
     * Play a single instruction/audio
     * @param instruction The instruction which being played.
     */
    private void singleInstructionPlayer(String instruction){
        try {
            fileLuncher.playSound("/numbertospeech/assets/"+instruction+".wav");
        } catch (IOException | URISyntaxException ex) {
            Logger.getLogger(JFrameHome.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonTell;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelText;
    private javax.swing.JTextField jTextFieldNumber;
    // End of variables declaration//GEN-END:variables
}
